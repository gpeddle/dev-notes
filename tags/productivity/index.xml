<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>productivity on /dev/notes - Notes on Software Development</title><link>https://gregpeddle.com/tags/productivity/</link><description>Recent content in productivity on /dev/notes - Notes on Software Development</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; &lt;a href="https://github.com/gpeddle">Greg Peddle&lt;/a></copyright><lastBuildDate>Sun, 03 Apr 2022 20:07:44 -0400</lastBuildDate><atom:link href="https://gregpeddle.com/tags/productivity/index.xml" rel="self" type="application/rss+xml"/><item><title>The 15 Minute Rule</title><link>https://gregpeddle.com/posts/15-minute-rule/</link><pubDate>Sun, 03 Apr 2022 20:07:44 -0400</pubDate><guid>https://gregpeddle.com/posts/15-minute-rule/</guid><description>Rubber Ducks considered Harmful In recent years, &amp;lsquo;Rubber Duck&amp;rsquo; debugging has been popularized. It goes like this:
Using rubber duck debugging, the developer is encouraged to talk about their current technical problem with a toy rubber duck. Explaining the problem to the duck will focus the developer&amp;rsquo;s thoughts and help find a solution.
This silliness might work, but it completely misses a much better method.
If you&amp;rsquo;re talking to a duck, you&amp;rsquo;re doing it wrong.</description></item></channel></rss>